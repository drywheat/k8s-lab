apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: todo-app
  labels:
    ravi-stack-component: app
    tier: frontend
spec:
  template:
    metadata:
      labels:
        ravi-stack-component: app
        tier: frontend
      annotations:
        #
        # NOTE Init containers can be used for a number of different tasks. In
        # this case, we're using them to emulate the "--volumes-from" Docker
        # flag during runtime.
        #
        pod.beta.kubernetes.io/init-containers: '[
          {
            "name": "init-assets-dir",
            "image": "drywheat/mallarapu:latest",
            "imagePullPolicy": "IfNotPresent",
            "command": ["sh", "-c", "cp -R /usr/src/app/static/* /assets/"],
            "volumeMounts": [
              {
                "name": "static-assets",
                "mountPath": "/assets"
              }
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              },
              "limits": {
                "cpu": "300m",
                "memory": "200Mi"
              }
            }
          }
        ]'
    spec:
      #
      # NOTE This volumen is shared by ALL containers in this Pod, including the
      # init containers!!!
      #
      volumes:
        - name: static-assets
          emptyDir: {}
      containers:
        #
        # NOTE This is the 1 of 2 containers in this Pod. Traffic is routed to
        # this container from the NodePort service. Nginx then serves "static"
        # content and passes all other requests to django app.
        #
        - name: web-server
          image: drywheat/nginx-jazzhands:v0.0.5
          ports:
            - containerPort: 80
          volumeMounts:
            - name: static-assets
              mountPath: /assets
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 300m
              memory: 200Mi
        #
        # NOTE This handles the meat of the requests, including reading/writing
        # the visitor count into Redis, persisting your messages into postgres,
        # and rendering the web form.
        #
        - name: web-app
          image: drywheat/mallarapu:latest
          ports:
            - containerPort: 8000
          env:
            - name: DEBUG
              value: "false"
            - name: REDIS_SERVICE
              value: redis
            - name: DB_SERVICE
              value: postgres
            - name: DB_NAME
              value: ravi_stack_db
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: pg-user-pass
                  key: username
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: pg-user-pass
                  key: password
          resources:
            requests:
              cpu: 250m
              memory: 100Mi
            limits:
              cpu: 300m
              memory: 200Mi
